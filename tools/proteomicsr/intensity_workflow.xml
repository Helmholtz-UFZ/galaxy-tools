<tool id="proteomicsr_intensity_workflow" name="proteomicsr: intensity workflow" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="21.05">
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements"/>
    <command detect_errors="exit_code"><![CDATA[
        Rscript '$rscript'
        && mv Rdata/dat_calculated.csv .
    ]]></command>
    <configfiles>
        <configfile name="rscript"><![CDATA[
library(proteomicsr)

#if $sampleTable.ext == 'csv'
    sampleTable <- read.csv("$sampleTable", row.names = 1)
#else
    sampleTable <- read.delim("$sampleTable", header = TRUE, row.names = 1, sep = "\t")
#end if

#set controlSamples = 'c("' + '", "'.join(str($control_samples).split(",")) + '")'

null <- run_intensity_workflow(
    sampleTable,
    control_samples = $controlSamples, 
    comparisons_relevant = NULL, ## if NULL, script continues with all possible comparisons. Otherwise, a vector should be provided, e.g. c("treatment1_vs_ctrl", "treatment2_vs_ctrl", "treatment2_vs_treatment1")
    sampleGenes = NULL,
    sampleMapping = NULL,
    remove_outliers = $remove_outliers,
    median_normalize = $median_normalize,
    run_vsn = $run_vsn,
#if $impute.run_imputation == "TRUE"
    run_imputation = $impute.run_imputation,
    imp_fun = $impute.imp_fun,
    imp_q = $impute.imp_q,
    impute_completely_missing_only = $impute_completely_missing_only,
#end if
    number_replicates_reliable = $number_replicates_reliable,
    reliable_all_comparisons = $reliable_all_comparisons,
    alternative = "$alternative",
    var.equal = $var_equal,
    paired = $paired,
    ## this only decides the output and column name should be hardcoded here? - should be "pvalue" or "pvalueadj"
    pvalue_decision = "$pvalue_decision",
    pvalue_adjustment = "$pvalue_adjustment",
    significance_cutoff = $significance_cutoff,
    color_up = "${color_up}FF",
    color_none = "${color_none}FF",
    color_down = "${color_down}FF"
)
        ]]></configfile>
    </configfiles>
    <inputs>
        <param argument="sampleTable" type="data" format="csv,tabular" label="Sample table" help="Rows: unique identifiers (e.g. uniprot accessions), Columns: samples. Replicates should be indicated using _1, _2, .... Content should be numeric."/>
        <param argument="control_samples" type="text" label="Control samples" help="Comma separated list of sample names, as used in the input table"/>
        <param argument="remove_outliers" type="boolean" truevalue="TRUE" falsevalue="FALSE" checked="false" label="Remove outliers" help="Identified by the function identify_outliers() based on Mahalanobis distances"/>
        <param argument="median_normalize" type="boolean" truevalue="TRUE" falsevalue="FALSE" checked="false" label="Apply median normalization" help=""/>
        <param argument="run_vsn" type="boolean" truevalue="TRUE" falsevalue="FALSE" checked="true" label="Apply variance stabilization using the DEP package" help=""/>
        <conditional name="impute">
            <param argument="run_imputation" type="select" label="Apply imputation using the DEP package" help="If TRUE, variance stabilization is performed anyway and also the parameters imp_fun, imp_q, and impute_completely_missing_only should be double-checked and adjusted if necessary">
                <option value="TRUE">TRUE</option>
                <option value="FALSE" selected="true">FALSE</option>
            </param>
            <when value="TRUE">
                <param argument="impute_completely_missing_only" type="boolean" truevalue="TRUE" falsevalue="FALSE" checked="true" label="Decide which missing data should be imputed." help=""/>
                <param argument="imp_fun" type="select" label="Method for imputation" help="">
                    <option value="MLE">Maximum likelihood-based imputation method using the EM algorithm</option>
                    <option value="bpca">Bayesian missing value imputation</option>
                    <option value="knn">Nearest neighbour averaging</option>
                    <option value="QRILC"> Imputation of left-censored missing data using random draws from a truncated distribution with parameters estimated using quantile regression</option>
                    <option value="MinDet">Imputation of left-censored missing data using a deterministic minimal value approach</option>
                    <option value="MinProb" selected="true"> Imputation of left-censored missing data by random draws from a Gaussian distribution centred to a minimal value</option>
                    <option value="min">Replaces the missing values by the smallest non-missing value in the data</option>
                    <option value="zero">Replaces the missing values by 0</option>
                    <option value="nbavg">Average neighbour imputation for fractions collected along a fractionation/separation gradient</option>
                    <option value="none">No imputation</option>
                </param>
                <param argument="imp_q" type="float" value="0.01" min="0" max="1" label="q-th quantile for left-censored imputation" help="The minimal value observed is estimated as being the q-th quantile of the observed values in that sample."/>
            </when>
            <when value="FALSE"/>
        </conditional>
        <param argument="number_replicates_reliable" type="integer" min="1" value="3" label="Number of replicates for reliable identification" help="Number of replicates for which quantitation data should be available to consider a protein reliably identified under the particular condition (i.e. in a sample)"/>
        <!--TODO formulation unclear, comparisons between what? Samples? -->
        <param argument="reliable_all_comparisons" type="select" label="Required comparisons" help="Candidates are returned that are identified in the given number of replicates (number_replicates_reliable) in all/at least one comparison.">
            <option value="FALSE">At least one</option>
            <option value="TRUE">All</option>
        </param>
        <!-- TODO which variances? -->
        <param argument="var.equal" name="var_equal" type="boolean" truevalue="TRUE" falsevalue="FALSE" checked="true" label="Treat variances as equal" help="for t-test"/>
        <param argument="paired" type="boolean" truevalue="TRUE" falsevalue="FALSE" checked="true" label="Use paired t-test" help=""/>
        <param argument="alternative" type="select" label="Alternative hypothesis" help="">
            <option value="two.sided">two.sided</option>
            <option value="greater">greater</option>
            <option value="less">less</option>
        </param>
        <param argument="pvalue_decision" type="select" label="Choose whether to extract and visualize data based on adjusted p-values or raw p-values" help="">
            <option value="pvalueadj" selected="true">adjusted p-values</option>
            <option value="pvalue">raw p-values</option>
        </param>
        <param argument="pvalue_adjustment" type="select" label="Method for p-value adjustment" help="">
            <option value="holm">Holm</option>
            <option value="hochberg">Hochberg</option>
            <option value="hommel">Hommel</option>
            <option value="bonferroni">Bonferroni</option>
            <option value="BY">Benjamini &amp; Yekutieli (BY)</option>
            <option value="fdr" selected="true">Benjamini &amp; Hochberg (BH/fdr)</option>
            <option value="none">None</option>
        </param>
        <param argument="significance_cutoff" type="float" value="0.05" min="0" max="1" label="Significance cutoff" help="All candidates with lower value are considered significantly affected"/>
        <param argument="color_up" type="color" value="#DC0000" label="Color for up-regulated candidates"/>
        <param argument="color_down" type="color" value="#3C5488" label="Color for down-regulated candidates"/>
        <param argument="color_none" type="color" value="#000000" label="Color for not significantly altered candidates"/>
        <param name="out_select" type="select" multiple="true">
            <option value="tables">Detailed tables</option>
            <option value="plots">Plots</option>
        </param>
    </inputs>
    <outputs>
        <data name="dat_calculated" format="csv" from_work_dir="dat_calculated.csv">
        </data>
        <collection name="output" type="list" label="${tool.name} on ${on_string}: additional tables">
            <discover_datasets pattern="__name_and_ext__" directory="Rdata"/>
            <filter>out_select and "tables" in out_select</filter>
        </collection>
        <collection name="plots" type="list" label="${tool.name} on ${on_string}: plots">
            <discover_datasets pattern="__name_and_ext__" directory="Plots"/>
            <filter>out_select and "plots" in out_select</filter>
        </collection>
    </outputs>
    <tests>
        <test expect_num_outputs="1">
            <param name="sampleTable" value="sampleTable.csv" ftype="csv"/>
            <param name="control_samples" value="control_04h_plusLPS_vs_control_04h_noLPS"/>
            <output name="dat_calculated">
                <assert_contents>
                    <has_n_lines n="4269"/>
                    <has_n_columns sep="," n="31"/>
                </assert_contents>
            </output>
        </test>
    </tests>
    <help><![CDATA[
        TODO: Fill in help.
    ]]></help>
</tool>