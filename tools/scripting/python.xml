<tool id="python_anaconda" name="@LANGUAGE@" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="23.0">
    <description>anaconda</description>
    <macros>
        <import>macros.xml</import>
        <token name="@LANGUAGE@">python</token>
        <token name="@CONTAINER@">continuumio/anaconda3</token>
        <token name="@TOOL_VERSION@">2023.07-1</token>
        <token name="@VERSION_SUFFIX@">0</token>
        <token name="@COMMAND_AND_SETUP@"><![CDATA[
            ## forbid the easy way to install packages (pip)
            export PIP_REQUIRE_VIRTUALENV=true &&

            python
        ]]></token>
        <token name="@HELP_READ_FROM_STDIN@"><![CDATA[
The script can access data set parameters as follows,
e.g. a tab delimited file can be read with ``pandas`` 

::

    import sys
    import pandas as pd
    df = pd.read_csv(sys.argv[1], sep="\t")

        ]]></token>
        <token name="@HELP_PARAMETERS@"><![CDATA[
Additional parameters can be used, e.g.

::

    import sys
    first_arg = sys.argv[1]

will store the 1st argument in the variable ``first_arg``.
        ]]></token>
    </macros>
    <xrefs>
    </xrefs>
    <requirements>
        <container type="docker">continuumio/anaconda3:@TOOL_VERSION@</container>
    </requirements>
    <version_command>python --version</version_command>
    <expand macro="command_macro"/>
    <expand macro="inputs_macro"/>
    <expand macro="outputs_macro"/>
    <tests>
        <!-- read tsv write csv -->
        <test>
            <repeat name="parameters">
                <conditional name="type_cond">
                    <param name="type_sel" value="data"/>
                    <param name="param" value="test.tsv" ftype="tabular"/>
                </conditional>
            </repeat>
            <param name="code" value='import sys; import pandas as pd; df = pd.read_csv(sys.argv[1], sep="\t"); df.to_csv("data.csv", index=False, sep=",");'/>
            <output_collection name="output" type="list" count="1">
                <element name="data" ftype="csv">
                    <assert_contents>
                        <has_line line="1,2" />
                        <has_n_lines n="3"/>
                        <has_n_columns n="2" sep=","/>
                    </assert_contents>
                </element>
            </output_collection>
        </test>
        <!-- plot w matplotlib -->
        <test>
            <repeat name="parameters">
                <conditional name="type_cond">
                    <param name="param" value="test.tsv" ftype="tabular"/>
                    <param name="filename" value="custom_name.tsv"/>
                </conditional>
            </repeat>
            <param name="code" value='import sys; import pandas as pd; from matplotlib.backends.backend_pdf import PdfPages;  df = pd.read_csv(sys.argv[1], sep="\t"); fh = PdfPages("points.pdf"); plt = df.plot(); fh.savefig(); fh.close(); print(f"plotted {sys.argv[1]}")'/>
            <output_collection name="output" type="list" count="1">
                <element name="points" ftype="pdf">
                    <assert_contents>
                        <has_text text="PDF" />
                    </assert_contents>
                </element>
            </output_collection>
            <assert_stdout>
                <has_line line="plotted inputs/custom_name.tsv"/>
            </assert_stdout>
        </test>
        <!-- install libraries ("forbidden") -->
        <test expect_failure="true">
            <param name="code" value='import pip; pip.main(["install", "biopython"]); import Bio'/>
        </test>
        <!-- read binary files (eg feather)  -->
        <test>
            <repeat name="parameters">
                <conditional name="type_cond">
                    <param name="param" value="test.h5" ftype="h5"/>
                </conditional>
            </repeat>
            <param name="code" value='import sys; import os; import pandas as pd; df = pd.read_hdf(sys.argv[1]); df.to_csv("data.csv", index=False, sep=",");'/>
            <output_collection name="output" type="list" count="1">
                <element name="data" ftype="csv">
                    <assert_contents>
                        <has_line line="1,2" />
                        <has_n_lines n="3"/>
                        <has_n_columns n="2" sep=","/>
                    </assert_contents>
                </element>
            </output_collection>
        </test>
        <!-- parameters -->
        <test>
            <repeat name="parameters">
                <conditional name="type_cond">
                    <param name="type_sel" value="text"/>
                    <param name="param" value="filename.csv"/>
                </conditional>
            </repeat>
            <repeat name="parameters">
                <conditional name="type_cond">
                    <param name="type_sel" value="text"/>
                    <param name="param" value="some value"/>
                </conditional>
            </repeat>
            <param name="code" value='import sys; fh = open(sys.argv[1], "w"); fh.write("Hello,world\n"); fh.write("Bye,world\n"); fh.close(); print(sys.argv[2]);'/>
            <output_collection name="output" type="list" count="1">
                <element name="filename" ftype="csv">
                    <assert_contents>
                        <has_line line="Hello,world"/>
                        <has_n_lines n="2"/>
                        <has_n_columns n="2" sep=","/>
                    </assert_contents>
                </element>
            </output_collection>
            <assert_stdout>
                <has_line line='some value'/>
            </assert_stdout>
        </test>
    </tests>
    <expand macro="help_macro"/>
    <citations>
        <citation type="bibtex">
            @misc{anaconda,
            title={Anaconda Software Distribution},
            url={https://docs.anaconda.com/},
            journal={Anaconda Documentation},
            version={Vers. 2-2.4.0}, 
            publisher={Anaconda Inc.},
            year={2020}
            }
        </citation>
    </citations>
</tool>
