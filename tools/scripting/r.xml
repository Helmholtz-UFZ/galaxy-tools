<tool id="r_tidyverse" name="@LANGUAGE@" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="23.0">
    <description>tidyverse</description>
    <macros>
        <import>macros.xml</import>
        <token name="@LANGUAGE@">R</token>
        <token name="@CONTAINER@">rocker/tidyverse</token>
        <token name="@TOOL_VERSION@">4.3.1</token>
        <token name="@VERSION_SUFFIX@">0</token>
        <token name="@COMMAND_AND_SETUP@"><![CDATA[
            ## The following is disabled, because it would allow the installation of R packages
            ## which I do not want (because users likely would install unversioned tools)
            ## echo ".libPaths(c(\"\${R_LIBS_USER:-\$_GALAXY_JOB_TMP_DIR}\", \"/usr/local/lib/R/site-library\", \"/usr/local/lib/R/library\"))" > ~/.Rprofile &&
            Rscript
        ]]></token>
        <token name="@HELP_READ_FROM_STDIN@"><![CDATA[
            The tool can read an optional input data set from stdin using ``file("/dev/stdin")``,
            e.g. a tab delimited file can be read as ``data <- read.delim(file("/dev/stdin"));``.
        ]]></token>
        <token name="@HELP_PARAMETERS@"><![CDATA[
            Additional parameters can be given and used in the R script, e.g.  ``args =
            commandArgs(trailingOnly = TRUE); first_arg = file(args[1])`` the first argument
            will be stored in the variable `first_arg`.
        ]]></token>
    <xrefs>
        <xref type="bio.tools">r</xref>
    </xrefs>
    <requirements>
        <container type="docker">@CONTAINER@:@TOOL_VERSION@</container>
    </requirements>
    <version_command>R --version</version_command>
    <expand macro="command_macro"/>
    <expand macro="inputs_macro"/>
    <expand macro="outputs_macro"/>

    <tests>
        <!-- read tsv write csv -->
        <test>
            <param name="infile" value="test.tsv" ftype="tabular"/>
            <param name="code" value='data = read.delim(file("stdin")); write.csv(data, "data.csv", row.names=FALSE)'/>
            <output_collection name="output" type="list" count="1">
                <element name="data" ftype="csv">
                    <assert_contents>
                        <has_line line="1,2" />
                        <has_n_lines n="3"/>
                        <has_n_columns n="2" sep=","/>
                    </assert_contents>
                </element>
            </output_collection>
        </test>
        <!-- use a tidyverse library -->
        <test>
            <param name="infile" value="test.tsv" ftype="tabular"/>
            <param name="code" value='library(ggplot2); data = read.delim(file("stdin")); pdf("points.pdf"); ggplot(data, aes(x=A, y=B)) + geom_point(); dev.off(); '/>
            <output_collection name="output" type="list" count="1">
                <element name="points" ftype="pdf">
                    <assert_contents>
                        <has_text text="PDF" />
                    </assert_contents>
                </element>
            </output_collection>
        </test>
        <!-- install libraries fails -->
        <test expect_failure="true">
            <param name="code" value='install.packages("maybe"); library(maybe); print("success")'/>
        </test>
        <test expect_failure="true">
            <param name="code" value='install.packages("BiocManager"); BiocManager::install("multtest"); print("success")'/>
        </test>
        <!-- read binary files (eg rds) -->
        <test>
            <param name="infile" value="test.rds" ftype="rds"/>
            <param name="code" value='data = readRDS(file("/dev/stdin")); write.csv(data, "data.csv", row.names=FALSE)'/>
            <output_collection name="output" type="list" count="1">
                <element name="data" ftype="csv">
                    <assert_contents>
                        <has_line line="1,2" />
                        <has_n_lines n="3"/>
                        <has_n_columns n="2" sep=","/>
                    </assert_contents>
                </element>
            </output_collection>
        </test>
        <!-- optional input and parameters -->
        <test>
            <param name="code" value='args = commandArgs(trailingOnly = TRUE); fileConn = file(args[1]); writeLines(c("Hello,world","Bye,world"), fileConn); close(fileConn); print(args[2]);'/>
            <repeat name="parameters">
                <param name="param" value="filename.csv"/>
            </repeat>
            <repeat name="parameters">
                <param name="param" value="some value"/>
            </repeat>
            <output_collection name="output" type="list" count="1">
                <element name="filename" ftype="csv">
                    <assert_contents>
                        <has_line line="Hello,world"/>
                        <has_n_lines n="2"/>
                        <has_n_columns n="2" sep=","/>
                    </assert_contents>
                </element>
            </output_collection>
            <assert_stdout>
                <has_line line='[1] "some value"'/>
            </assert_stdout>
        </test>
    </tests>
    <expand macro="help_macro"/>
    <citations>
        <citation type="doi">10.21105/joss.01686</citation>
    </citations>
</tool>
